html {
  background-color: hsla(var(--r-surface-100), 1);
  color: hsla(var(--r-text-primary), 1);
  interpolate-size: allow-keywords;
}

p {
  all: unset;
  white-space: wrap;
}

.padding {
  padding: 5px;
}

.rounding {
  border-radius: 5px;
}

.margin-s {
  margin: 5px
}

.margin-m {
  margin: 10px
}

.margin-l {
  margin: 15px
}

.fullWidth {
  width: 100%;
}


/* Flex */
.flex {
  display: flex;

  &.wrap {
    flex-wrap: wrap;
  }
}


.column {
  display: flex;
  flex-direction: column;
}

.row {
  display: flex;
  flex-direction: row;
}

.center {
  align-items: center;
  /* align-content: center; */
  /* justify-content: center; */
}

.alignItemsCenter {
  align-items: center;
}

.justifyContentCenter {
  justify-content: center;
}

.alignContentCenter {
  align-content: center;
}

.start {
  align-items: flex-start;
}

.gap {
  gap: 5px
}

.gap-s {
  gap: 5px
}

.gap-m {
  gap: 10px
}

.gap-l {
  gap: 15px
}

/* end flex */

.noClick { pointer-events: none;}

[opacity-value]{
    --opacity: attr(opacity-value type(<number>), 1);
    opacity: var(--opacity);
}

/* MAGIC INPUT
USAGE:
<input>
<label>

Simple as. Defaults:
- grabs the first label coming after it, add data-nolabel to prevent that.
- Add data-validity to change border colors on valid/invalid input.
- if it's data-editable it'll look different and grab the first data-edit element underneath it
*/
input{
  --padding: 5px;
  --height: 26px;
  transition: all 0.5s !important;
  ~*{transition: all 0.2s !important;}

  all: unset;
  position: relative;
  width: calc(100% - (var(--padding) * 2) - 2px);
  border-radius: 5px;
  transition: 0.1s;
  height: var(--height);
  padding: var(--padding);
  padding-left: 7px;
  background-color: hsla(var(--r-primary), 0.05);

  /* &:has()
   &:not(:last-of-type){
    margin-bottom: 10px;
  } */

  &[data-validity]{
    &:invalid {
      border: 1px solid hsla(var(--r-error), 0.5);
      color: hsla(var(--r-text-primary), 1);
    }
  
    &:valid {
      border: 1px solid hsla(var(--r-good), 0.5);
      color: hsla(var(--r-text-primary), 1);
    }
  }


  &:focus {
    background-color: hsla(var(--r-primary), 0.1);
  }

  &:not([data-nolabel]){
    &:has(+ label){

      &::placeholder {
        opacity: 0;
      }

      & + label {
        font-weight: 500;
        height: 29px;
        margin-left: 7px;
        margin-top: -34px;
        pointer-events: none;
        transition: 0.1s;
        color: grey;
      }

      &:not(:placeholder-shown) {
        padding-top: 15px;
        & + label {
          margin-left: 4px;
          margin-top: -50px;
          height: 44px;
          font-size: smaller;
          opacity: 1;
          color: hsla(var(--r-text-primary), 0.7);
        }
      }
    }
  }  
  

  &[data-editable]{
    background-color: unset;
    cursor: pointer;
    padding-right: 36px;
    width: calc(100% - (var(--padding) * 2) - 32px);

    &:not(:has(:focus)){
      &:has(+[data-edit]){
        
        & +[data-edit] {
            height: 36px;
            max-height: 36px;
            background-color: hsla(var(--r-primary), 0);
            padding-left: 5px;
            padding-right: 5px;
            box-shadow: none;
            margin-top: -40px;
            margin-left: auto;
            cursor: pointer;
            color: hsla(var(--r-primary), 0.5);
        }
      }
      &:has(+label){
        & + label:has(+[data-edit]){
          & +[data-edit] {
            height: 36px;
            max-height: 36px;
            background-color: hsla(var(--r-primary), 0);
            padding-left: 5px;
            padding-right: 5px;
            box-shadow: none;
            margin-top: -40px;
            margin-left: auto;
            cursor: pointer;
            color: hsla(var(--r-primary), 0.5);
          }
        }
      }
    }
    

    &:focus {
      background-color: hsla(var(--r-primary), 0.1);
      cursor: auto;
      &:has(+[data-edit]){
        padding-right: 36px;
        width: calc(100% - (var(--padding) * 2) - 32px);
        & +[data-edit] {
            transition: opacity width 0.5s;
            width: 0px;
            opacity: 0;
            cursor: text;
            pointer-events: none;
            background-color: hsla(var(--r-primary), 0);
          }
      }

      &:has(+label){
        & + label:has(+[data-edit]){
          & +[data-edit] {
            transition: opacity width 0.5s;
            width: 0px;
            opacity: 0;
            cursor: text;
            pointer-events: none;
            background-color: hsla(var(--r-primary), 0);
          }
        }
      }
    }

    &:hover{
      &:has(+[data-edit]){
        & +[data-edit] {
          color: hsla(var(--r-primary), 1)
        }
      }
  
      &:has(+label){
        & + label:has(+[data-edit]){
          & +[data-edit] {
            color: hsla(var(--r-primary), 1)
          }
        }
      }
    }
  
  }
}

/*form*/
.form {
  h2 {
    margin-left: 5px;
    margin-bottom: 10px;
  }

  &:invalid {
    [type=submit] {
      cursor: not-allowed;
      pointer-events: none;
      opacity: 0.5;
    }
  }

  .inputContainer {
    --padding: 5px;
    width: 100%;
    position: relative;

    >label {
      transition: 200ms;
      position: absolute;
      top: 5px;
      left: 5px;
      pointer-events: none;
      opacity: 0.7;
    }

    >input {
      all: unset;
      width: calc(100% - (var(--padding) * 2));
      height: 26px;
      border-radius: 5px;
      transition: 0.1s;
      padding: var(--padding);
      transition: 0.2s;
      background-color: hsla(var(--r-primary), 0.05);


      &:invalid {
        border: 1px solid hsla(var(--r-error), 0.5);
        color: hsla(var(--r-text-primary), 1);
      }

      &:valid {
        border: 1px solid hsla(var(--r-good), 0.5);
        color: hsla(var(--r-text-primary), 1);
      }

      &:focus {
        background-color: hsla(var(--r-primary), 0.1);
      }

      &:not(:placeholder-shown) {
        padding-top: 15px;

        &~label {
          top: 0px;
          font-size: smaller;
          opacity: 1;
        }
      }

      &::placeholder {
        opacity: 0;
      }
    }
  }
}

input:-webkit-autofill,
input:-webkit-autofill:hover,
input:-webkit-autofill:focus,
input:-webkit-autofill:active {
  transition: background-color 0s 600000s, color 0s 600000s !important;
}

/* Scrolling */
*::-webkit-scrollbar {
  /* display: none; */
  /* Hides the scrollbar */

  &:hover {
    display: auto;
  }
}

.scrollX {
  /* overflow-y: hidden; */
  overflow-y: hidden;
  overflow-x: scroll;
  white-space: nowrap;
  scroll-snap-type: x proximity;
  scroll-snap-align: start;
}

.desktopScrollbar {
  &::-webkit-scrollbar {
    width: 10px;
    height: 10px;
  }

  &::-webkit-scrollbar-track {
    margin-block: 10px;
    margin-inline: 10px;
  }

  &::-webkit-scrollbar-thumb {
    border-radius: 5px;
    transition: 0.4s;
    background: hsla(var(--r-surface-400), 0.5);
    cursor: pointer;
  }

  &::-webkit-scrollbar-thumb:hover {
    transition: 0.4s;
    background: hsla(var(--r-surface-400), 1);
  }

  &::-webkit-scrollbar-thumb:active {
    transition: 0.4s;
    background: hsla(var(--r-surface-400), 1);
  }
}




.grid {
  --grid-max-col-count: attr(max-col-count type(<number>), 3);
  --grid-min-col-size: attr(min-col-size type(*), 20rem);
  --grid-gap: 1rem;

  /* calculations, do not touch */
  --grid-col-size-calc: calc(
    (100% - var(--grid-gap) * var(--grid-max-col-count)) /
      var(--grid-max-col-count)
  );
  --grid-col-min-size-calc: min(
    100%,
    max(var(--grid-min-col-size), var(--grid-col-size-calc))
  );

  display: grid;
  gap: var(--grid-gap);

  grid-template-columns: repeat(
    auto-fit,
    minmax(var(--grid-col-min-size-calc), 1fr)
  );

  >*{height: calc(100% - var(--grid-gap));}


  .gridCard {
    --card-padding: 0.8rem;
    --card-gaps: 0.5rem;

    width: calc(100% - calc(var(--card-padding) * 2));
    height: calc(100% - calc(var(--card-padding) * 2));

    padding: var(--card-padding);
    gap: var(--card-gaps);
    background-color: hsl(var(--r-surface-100));
  }
}

.margin0auto {
  margin: 0 auto;
}
